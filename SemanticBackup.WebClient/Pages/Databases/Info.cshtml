@page "/databases/{id}"
@model SemanticBackup.WebClient.Pages.Databases.InfoModel
@{
    ViewData["Title"] = $"Databases | Info #{Model.DatabaseResponse?.DatabaseName}";
}
@{
    <script type="text/javascript">
        var baseUrl = @Html.Raw(Json.Serialize(Model.ApiEndPoint));
    </script>
}
<div class="container pd-x-0">
    <div class="ui container">

        <div class="ui header large">
            Info #@(Model.DatabaseResponse?.DatabaseName)
        </div>

        <div class="ui celled list">
            <div class="item">
                <i class="database blue icon"></i>
                <div class="content">
                    <div class="header">DATABASE NAME</div>
                    @Model.DatabaseResponse.DatabaseName
                </div>
            </div>
            <div class="item">
                <i class="desktop blue icon"></i>
                <div class="content">
                    <div class="header">SERVER</div>
                    @Model.DatabaseResponse.Server
                </div>
            </div>
            <div class="item">
                <i class="key blue icon"></i>
                <div class="content">
                    <div class="header">CREDENTIALS</div>
                    <span> <b>Username:</b>@Model.DatabaseResponse.Username</span>  <span style="margin-left:7px"> <b>Password:</b>   @Model.DatabaseResponse.Password</span>
                </div>
            </div>
            <div class="item">
                <i class="database blue icon"></i>
                <div class="content">
                    <div class="header">DATABASE TYPE</div>
                    @Model.DatabaseResponse.DatabaseType
                </div>
            </div>

            <div class="item">
                <i class="clock blue icon"></i>
                <div class="content">
                    <div class="header">DELETE OLD BACKUPS AFTER</div>
                    @(string.Format("{0:N0} DAYS",Model.DatabaseResponse.BackupExpiryAgeInDays))
                </div>
            </div>
            <div class="item">
                <i class="info blue icon"></i>
                <div class="content">
                    <div class="header">Description</div>
                    @(string.Format("{0:N0} DAYS",Model.DatabaseResponse.Description))
                </div>
            </div>
        </div>

        <div class="ui header large">
            Recent 10 Backups For #@(Model.DatabaseResponse?.DatabaseName)
        </div>

        <table class="ui selectable table">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Name</th>
                    <th>Backup Date</th>
                    <th>Last Updated</th>
                    <th>Avg. Speed</th>
                    <th>Backup Status</th>
                </tr>
            </thead>
            <tbody id="records_data_table">
                @{
                    int count = 0;
                    if (Model.BackupRecordsResponse != null && Model.BackupRecordsResponse.Count > 0)
                        foreach (var record in Model.BackupRecordsResponse)
                        {
                            count++;
                            <tr id="record_for_@(record.Id)" onclick="location.href='/databasebackupschedules/@(record.Id)'">
                                <td>@string.Format("{0:N0}", count)</td>
                                <td class="positive" style="font-weight:bold;font-size:14px"> <i class="cloud upload icon"></i> @record.Name</td>
                                <td class="warning" style="font-weight:bold">@string.Format("{0:yyyy-MM-dd hh:mm tt}", record.RegisteredDate)</td>
                                <td class="last_status_update_for_@(record.Id) use-time-ago" use-time-ago-value="@(record.StatusUpdateDate)" style="font-weight:bold">@string.Format("{0:yyyy-MM-dd hh:mm tt}", record.StatusUpdateDate)</td>
                                <td class="execution_milliseconds_for_@(record.Id)">@record.ExecutionMilliseconds</td>

                                @{
                                    if (record.BackupStatus == "EXECUTING")
                                    {
                                        <td class="event_status_for_@(record.Id)"> <span class="ui label small basic blue"><i class="notched circle loading icon"></i>@record.BackupStatus</span>  </td>
                                    }
                                    else if (record.BackupStatus == "COMPLETED")
                                    {
                                        <td class="event_status_for_@(record.Id)"> <span class="ui label small basic teal"><i class="notched circle loading icon"></i>VALIDATING</span>  </td>
                                    }
                                    else if (record.BackupStatus == "COMPRESSING")
                                    {
                                        <td class="event_status_for_@(record.Id)"> <span class="ui label small basic olive"><i class="notched circle loading icon"></i>@record.BackupStatus</span>  </td>
                                    }
                                    else if (record.BackupStatus == "READY")
                                    {
                                        <td class="event_status_for_@(record.Id)"><span class="ui label small basic green"><i class="file archive icon"></i>BACKUP COMPLETED</span>  </td>
                                    }
                                    else if (record.BackupStatus == "ERROR")
                                    {
                                        <td class="event_status_for_@(record.Id)"><span class="ui label small basic red"><i class="exclamation circle icon"></i>@record.BackupStatus</span>  </td>
                                    }
                                    else
                                    {
                                        <td class="event_status_for_@(record.Id)">  <span class="ui label small basic"><i class="info icon"></i>@record.BackupStatus</span>  </td>
                                    }
                                }

                            </tr>
                        }
                    else
                    {
                        <tr>
                            <td colspan="6" style="text-align:center">
                                <div class="ui message small warning"><div>To Data Available</div></div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

    </div>
</div>
@section Scripts{
<script src="~/lib/signalr/dist/browser/signalr.js"></script>
<script type="text/javascript" src="~/assets/js/signalr-subscriber.js"></script>
<script type="text/javascript" src="~/assets/js/time-ago.js"></script>
<script type="text/javascript">
    jQuery(document).ready(function ($) {
        //Create Main Obersavable
        var currentRecordId = @(Html.Raw(Json.Serialize( Model.DatabaseResponse?.Id)));
        _ = getListenerAsync(baseUrl + "BackupRecordsNotify", currentRecordId, "ReceiveNotification", function (response) {
            console.log("Received Database Backup Status Update");
            //console.log(response);
            var metric = response.metric;
            var key = metric.id;
            var status = metric.backupStatus;
              //Check if Not Exists
            if(response.isNewMetric && $("#record_for_" + key).length == 0)
            {
                 console.log("Prepending new Record Notification");
                 var newElement = '<tr id="record_for_'+ key +'"><td colspan="6"><div class="ui tiny blue message"><div class="header">New backup for <b><a href="/databasebackupschedules/'+ key +'"> '+ metric.name +' </a></b> has started <span style="color:orange;margin-right:10px" class="use-time-ago" use-time-ago-value="'+ metric.registeredDate +'"> Just now </span>&gt;&gt; Progress: <span class="event_status_for_'+ key +'"> <span class="ui label small basic"><i class="info icon"></i>QUEUED</span> </span></div></div></td></tr>';
                 $("#records_data_table").prepend(newElement);
            }
            //Update Status
            console.log("Updating UI Key: " + key + ", Status: " + status);
            if (status == "EXECUTING") { $(".event_status_for_" + key).html('<span class="ui label small basic blue"><i class="notched circle loading icon"></i>' + status + '</span>'); }
            else if (status == "COMPLETED") { $(".event_status_for_" + key).html('<span class="ui label small basic teal"><i class="notched circle loading icon"></i>VALIDATING</span>'); }
            else if (status == "COMPRESSING") { $(".event_status_for_" + key).html('<span class="ui label small basic olive"><i class="notched circle loading icon"></i>' + status + '</span>'); }
            else if (status == "READY") { $(".event_status_for_" + key).html('<span class="ui label small basic green"><i class="file archive icon"></i>BACKUP COMPLETED</span>'); }
            else if (status == "ERROR") { $(".event_status_for_" + key).html('<span class="ui label small basic red"><i class="exclamation circle icon"></i>' + status + '</span>'); }
            else { $(".event_status_for_" + key).html('<span class="ui label small basic"><i class="info icon"></i>' + status + '</span>'); }
            //Update Others
            $(".execution_milliseconds_for_" + key).html(metric.executionMilliseconds);
            $(".last_status_update_for_" + key).html("Just now");
            $(".last_status_update_for_" + key).attr("use-time-ago-value", metric.statusUpdateDate);
            //console.log("Updated UI Success");
        });
    });
</script>
}
