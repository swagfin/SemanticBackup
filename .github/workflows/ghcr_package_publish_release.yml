name: ghcr package publish release

on:
  release:
    types: [published]
    
jobs:

  ghcr_package_publish_release:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: docker login
      run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}} ghcr.io
    
    - name: Get Release Tag
      id: get_release_tag
      run: echo "TAG=${{ github.event.release.tag_name }}" >> "$GITHUB_OUTPUT"
    
    - name: Check if Latest Version
      id: check_latest
      run: echo "LATEST=${{ startsWith(github.ref, 'refs/tags/v') && github.event.release.tag_name == steps.get_release_tag.outputs.TAG }}" >> "$GITHUB_OUTPUT"
    
    - name: Build the versioned Docker Image
      run: docker build . --file SemanticBackup/Dockerfile --tag ghcr.io/${{secrets.DOCKER_USER}}/semantic-backup:${{ steps.get_release_tag.outputs.TAG }}
    - name: Docker Push versioned Image
      run: docker push ghcr.io/${{secrets.DOCKER_USER}}/semantic-backup:${{ steps.get_release_tag.outputs.TAG }}
    
    - name: Publish Latest Image (if applicable)
      if: steps.check_latest.outputs.LATEST == 'true'
      run: |
        docker tag ghcr.io/${{secrets.DOCKER_USER}}/semantic-backup:${{ steps.get_release_tag.outputs.TAG }} ghcr.io/${{secrets.DOCKER_USER}}/semantic-backup:latest
        docker push ghcr.io/${{secrets.DOCKER_USER}}/semantic-backup:latest


  update_helm_version:
    runs-on: ubuntu-latest
    needs: [ghcr_package_publish_release]
    steps:
      - name: Get Release Tag
        id: get_release_tag
        run: echo "TAG=${{ github.event.release.tag_name }}" >> "$GITHUB_OUTPUT"
      
      - name: Trigger Helm Version Update in infra-configs
        run: |
          curl -X POST https://api.github.com/repos/${{secrets.DOCKER_USER}}/infra-configs/actions/workflows/update-version.yaml/dispatches \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.DOCKER_PASSWORD }}" \
          -d '{
            "ref": "master",
            "inputs": {
              "app": "semantic-backup-single-instance",
              "version": "${{ steps.get_release_tag.outputs.TAG }}"
            }
          }'
